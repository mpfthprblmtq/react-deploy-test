{"version":3,"sources":["components/TestComponent/TestComponent.styles.ts","utils/RouterPaths.ts","components/WoodComponent/WoodComponent.tsx","app/AppRouter.tsx","app/App.tsx","index.tsx"],"names":["StyledContainer","styled","div","RouterPaths","WoodComponent","useState","middlePoint","setMiddlePoint","outerLength","setOuterLength","submittedValues","undefined","getDecimal","fraction","splitStr","split","decimal","length","splitFraction","getFraction","Fraction","toFraction","initialValues","totalLength","lengthBetweenPoints","validate","values","errors","test","onSubmit","resetForm","decTotalLength","decLengthBetweenPoints","submitForm","component","TextField","name","label","type","Button","variant","Typography","Test","lazy","About","AppRouter","fallback","path","Empty","element","Wood","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAEaA,E,MAAkBC,EAAOC,IAAV,0FAAGD,CAAH,yB,2CCFhBE,E,kDAAAA,K,2BAAAA,E,iCAAAA,E,gCAAAA,M,mFC2FGC,EAnF0B,WAAO,IAAD,EAE3C,EAAsCC,mBAAiB,IAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAiB,IAAvD,mBAAOG,EAAP,KAAoBC,EAApB,KAGIC,OAA4DC,EAE1DC,EAAa,SAACC,GAChB,IAAMC,EAAWD,EAASE,MAAM,KAC5BC,EAAkB,EAEtB,GAAwB,IAApBF,EAASG,OAAc,CACvB,IAAMC,EAAgBJ,EAAS,GAAGC,MAAM,KAGxCC,GAF2BE,EAAc,IACZA,EAAc,GAK/C,OAAOF,IADsBF,EAAS,IAIpCK,EAAc,SAACH,GAEjB,OADiB,IAAII,IAASJ,GACdK,YAAW,IA8B/B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,cAAa,UAAEZ,SAAF,QApDuB,CAACa,YAAa,GAAIC,oBAAqB,IAoD1BC,SA7BhD,SAACC,GACd,IAAMC,EAAc,GAapB,OAXKD,EAAOH,YAEA,oBAAoBK,KAAKF,EAAOH,eACxCI,EAAOJ,YAAc,wBAFrBI,EAAOJ,YAAc,WAKpBG,EAAOF,oBAEA,oBAAoBI,KAAKF,EAAOF,uBACxCG,EAAOH,oBAAsB,wBAF7BG,EAAOH,oBAAsB,WAI1BG,GAe0EE,SAAU,SAACH,EAAD,GAA4B,IAAjBI,EAAgB,EAAhBA,WAZvF,SAACJ,GAChB,IAAMK,EAAiBnB,EAAWc,EAAOH,aACnCS,EAAyBpB,EAAWc,EAAOF,qBAEjDjB,EAAeY,EAAYY,EAAiB,IAC5CtB,EAAeU,GAAaY,EAAiBC,GAA0B,IAEvEtB,EAAkBgB,EAMVO,CAAWP,GACXI,KAFJ,SAII,eAAC,IAAD,WACI,cAAC,IAAD,CACII,UAAWC,IACXC,KAAM,cACNC,MAAO,eACPC,KAAK,SAET,cAAC,IAAD,CACIJ,UAAWC,IACXC,KAAM,sBACNC,MAAO,gCACPC,KAAK,SAET,cAACC,EAAA,EAAD,CAAQC,QAAS,WAAYF,KAAM,SAAnC,yBAGR,eAACG,EAAA,EAAD,4BAA2BnC,KAC3B,eAACmC,EAAA,EAAD,4BAA2BjC,SCjFjCkC,EAAOC,gBAAK,kBAAM,uDAClBC,EAAQD,gBAAK,kBAAM,iCAcVE,EAZsB,WACjC,OACI,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM5C,EAAY6C,MAAOC,QAAS,cAACP,EAAD,MACzC,cAAC,IAAD,CAAOK,KAAM5C,EAAYyC,MAAOK,QAAS,cAACL,EAAD,MACzC,cAAC,IAAD,CAAOG,KAAM5C,EAAY+C,KAAMD,QAAS,cAAC,EAAD,Y,QCFzCE,EARgB,WAC7B,OACI,cAAC,IAAD,UACE,cAAC,EAAD,OCHRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fb59229c.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nexport const StyledContainer = styled.div`\n    text-align: center;\n`;","export enum RouterPaths {\n    Empty = '/react-deploy-test',\n    About = '/react-deploy-test/about',\n    Wood = '/react-deploy-test/wood',\n}","import {FunctionComponent, useState} from \"react\";\nimport {StyledContainer} from \"../TestComponent/TestComponent.styles\";\nimport {Formik, Field, Form} from \"formik\";\nimport {TwoPointCenterWallHangValues} from \"./WoodFormValues\";\nimport {TextField} from \"formik-mui\";\nimport {Button, Typography} from \"@material-ui/core\";\nimport Fraction from \"fraction.js\";\n\nconst WoodComponent: FunctionComponent = () => {\n\n    const [middlePoint, setMiddlePoint] = useState<string>('');\n    const [outerLength, setOuterLength] = useState<string>('');\n\n    const initialValues: TwoPointCenterWallHangValues = {totalLength: '', lengthBetweenPoints: ''};\n    let submittedValues: TwoPointCenterWallHangValues | undefined = undefined;\n\n    const getDecimal = (fraction: string): number => {\n        const splitStr = fraction.split(\" \");\n        let decimal: number = 0;\n\n        if (splitStr.length === 2) {\n            const splitFraction = splitStr[1].split(\"/\");\n            const numerator: number = +splitFraction[0];\n            const denominator: number = +splitFraction[1];\n            decimal = numerator / denominator;\n        }\n\n        const wholeNumber: number = +splitStr[0];\n        return decimal + wholeNumber;\n    };\n\n    const getFraction = (decimal: number): string => {\n        const fraction = new Fraction(decimal);\n        return fraction.toFraction(true);\n    };\n\n    const validate = (values: TwoPointCenterWallHangValues) => {\n        const errors: any = {};\n\n        if (!values.totalLength) {\n            errors.totalLength = 'Required';\n        } else if (!/\\d+( \\d+\\/\\d+)*$/i.test(values.totalLength)) {\n            errors.totalLength = 'Invalid length value';\n        }\n\n        if (!values.lengthBetweenPoints) {\n            errors.lengthBetweenPoints = 'Required';\n        } else if (!/\\d+( \\d+\\/\\d+)*$/i.test(values.lengthBetweenPoints)) {\n            errors.lengthBetweenPoints = 'Invalid length value';\n        }\n        return errors;\n    };\n\n    const submitForm = (values: TwoPointCenterWallHangValues) => {\n        const decTotalLength = getDecimal(values.totalLength);\n        const decLengthBetweenPoints = getDecimal(values.lengthBetweenPoints);\n\n        setMiddlePoint(getFraction(decTotalLength / 2));\n        setOuterLength(getFraction((decTotalLength - decLengthBetweenPoints) / 2));\n\n        submittedValues = values;\n    };\n\n    return (\n        <StyledContainer>\n            <Formik initialValues={submittedValues ?? initialValues} validate={validate} onSubmit={(values, { resetForm }) => {\n                submitForm(values);\n                resetForm();\n            }}>\n                <Form>\n                    <Field\n                        component={TextField}\n                        name={'totalLength'}\n                        label={'Total Length'}\n                        type='text'\n                    />\n                    <Field\n                        component={TextField}\n                        name={'lengthBetweenPoints'}\n                        label={'Length Between Hanging Points'}\n                        type='text'\n                    />\n                    <Button variant={'outlined'} type={'submit'}>Submit</Button>\n                </Form>\n            </Formik>\n            <Typography>Middle Point: {middlePoint}</Typography>\n            <Typography>Outer Length: {outerLength}</Typography>\n        </StyledContainer>\n    )\n};\n\nexport default WoodComponent;","import {FunctionComponent, lazy, Suspense} from \"react\";\nimport {Route, Routes} from 'react-router-dom'\nimport {RouterPaths} from \"../utils/RouterPaths\";\nimport WoodComponent from \"../components/WoodComponent/WoodComponent\";\n\nconst Test = lazy(() => import('../components/TestComponent/TestComponent'));\nconst About = lazy(() => import('../components/About/About'));\n\nconst AppRouter: FunctionComponent = () => {\n    return (\n        <Suspense fallback={<div>loading...</div>} >\n            <Routes>\n                <Route path={RouterPaths.Empty} element={<Test />} />\n                <Route path={RouterPaths.About} element={<About />} />\n                <Route path={RouterPaths.Wood} element={<WoodComponent />} />\n            </Routes>\n        </Suspense>\n    )\n};\n\nexport default AppRouter;\n","import {FunctionComponent} from 'react';\nimport AppRouter from './AppRouter';\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst App: FunctionComponent = () => {\n  return (\n      <BrowserRouter>\n        <AppRouter />\n      </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}